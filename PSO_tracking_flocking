clc
clear all
close all

im=imread('frame00000_6.jpg');
temp=imread('temp6.jpg');

graf=0;
im_orig=im;
im=rgb2gray(im);
[ylinha xcoluna]=size(im);
temp=rgb2gray(temp);
[ylinhaT xcolunaT]=size(temp);


N=200;
d=2;
crit_parada=0.9;
objfun='ftracking'; 

delta=0.008; %velocidade de ataque
c1=0.9;       %separação   0.1 - Melhores valores
c2=0.01;       %coesão      0.4
c3=1.1;       %alinhamento 1.1
c4=2;        %liderança

uby=(ylinha-ylinhaT);
ubx=(xcoluna-xcolunaT);
lb=[1 1];

V=0.0001;

v=V*rand(N,d);
yRange = ones(N,1).*(uby-1);
xRange = ones(N,1).*(ubx-1);
x = [ceil(rand(N,1).*yRange) ceil(rand(N,1).*xRange)];

gbest=inf;
p=zeros(N,d);

for i=1:N
    pbest(i,1)=abs(feval(objfun,x(i,:),im,temp)-1);
    p(i,:)= x(i,:);
    if pbest(i,1) < gbest
        gbest = pbest(i,1);
        g = p(i,:);
    end
end


while (1-gbest <= crit_parada)
    
        
        %gbest=gbest*1.05; %Decaimento do gbest para cada frame
        %pbest=pbest*1.1;  %Decaimento do pbest para cada frame
     
        a =zeros(N,d);  %Zera matriz de acelerações do flocking para cada frame
        a4=zeros(N,d);  %Zera matriz da regra 4 para cada frame
        for i=1:N
            %Zera vetor a das regras para cada indivíduo
            a1=zeros(N,d);
            a2=zeros(N,d);
            a3=zeros(N,d); 
            for m=1:N
                if (m ~= i)
                    r = x(m,:)-x(i,:);               % Posição atual menos a posição seguinte, acha variação
                    vr = v(m,:)-v(i,:);              % velocidade atual menos a velocidade seguinte - deslocamento no plano
                    rmag=sqrt(r(1,1)^2+r(1,2)^2);    % Distância entre os pontos apenas do primeiro!!
                   
                    a1(i,:) = a1(i,:) - c1*r/rmag^2; %  Separação
                    a2(i,:) = a2(i,:) + c2*r;        %  coesão
                    a3(i,:) = a3(i,:) + c3*vr;       %  alinhamento   
                end
            end
            
            rr= x(i,:)-g; %Calcula a diferença da posição entre o indivíduo i e o gbest
            obmag=sqrt(rr(1,1)^2+rr(1,2)^2); %Calcula a distância entre i e  gbest
            a4(i,:) = a4(i,:)-c4*rr/obmag;  %Atribui uma aceleração para fazer o indivíduo i convergir para gbest
           
            a(i,:)= a1(i,:) + a2(i,:)/(N-1)+ (a3(i,:)/(N-1))+a4(i,:); %Somatório das regras
            v = v + a*delta ;  % Atualiza velocidades
            x = x + v*delta;   % Atualiza posições
            
            x(i,:)=ceil(x(i,:)); %confinamento
            if x(i,2)<=1
                x(i,2)=50;
            end
            if x(i,1)<=1
                x(i,1)=50;
            end
            
            if x(i,1)>=uby
                x(i,1)=uby-50;
            end
            if x(i,2)>=ubx
                x(i,2)=ubx-50;
            end
            
            %Avalia o fitness do indivíduo i
            fitness =abs(feval(objfun,x(i,:),im,temp)-1);
            if fitness < pbest(i)
                pbest(i) = fitness;
                p(i,:)= x(i,:);
            end
            if pbest(i) < gbest
                gbest = pbest(i);
                g = p(i,:);
            end
            gbest
        end
        %contour(im)
        imshow(im)
        hold on
        plot(x(:,2),x(:,1),'r*');
        plot(g(:,2),g(:,1),'k^'); %Lider
        hold off
        axis([0 xcoluna 0 ylinha]);
        %axis equal
        pause(0.0000001)
        %pause(1)
   
end

