camList = webcamlist;
% cam1 = webcam(1);
cam2 = webcam(2);
frame=0;
  img = snapshot(cam2);
  imgc(:,:,1)=rgb2gray(img);
 for f=2:2100
        img = snapshot(cam2);
%       image(img)
        imgc(:,:,f)=rgb2gray(img);
        imgc2(:,:,f)=double(imgc(:,:,f));
            dif= imgc2(:,:,f) - imgc2(:,:,f-1);
%             image( dif)
        pause(0.1)
 
% end
    
% load('mag_uv_OF_crowd2.mat');
% load('mag_uv_crowd2.mat');
    
    %tamanho_volume=length(mag_uv);
    tamanho_volume=length(dif);
    
    n_bacterias=500;       % número total de bactérias inicial em cada frame
    n_rodada=5;            %  número de rodadas em um mesmo frame
    desvio=2;              %3
    %coef_mortalidade=0.1;  %50 abaixo da média
    %coef_natalidade=1.4;   %10 acima da média
    %taxa_crescimento_vegetativo=coef_natalidade-coef_mortalidade; %Intervalo de 5% a 20% (Brasil = 8.08%)
    
    % for frame=1:tamanho_volume
    
    frame=frame+1;
    %func=mag_uv(:,:,frame);
    func=dif;
    [uby ubx]=size(func);
    
    %População e fitness
    clear fitness
    clear estoque
    clear x
    load('posicao_bac3.mat')
    
    for b=1:n_bacterias
%         if (b==1)
%          x(b,:)=[rand*(uby-30)+30 rand*(ubx-30)+30];
%          save('posicao_bac3.mat','x');
%         end
        fitness(b,1)=abs(func(ceil(x(b,1)),ceil(x(b,2))));
    end
    %média e desvio padão 
    media_global=mean(fitness);
    desvio_global=std(fitness);
    
    %Vetor de alimento
    estoque=zeros(length(fitness),1);
    
    %Número de iterações para cada frame
    for rodada=1:n_rodada
        
        %Para cada bactéria
        for i=1:length(fitness)
            %Confinamento
            pos1=find(x(i,:)<=40);     % Encontra valores na margem do frame
            pos2=find(x(i,:)>=ubx-40); % Encontra valores na margem do frame
            if pos1>=1
                x(i,pos1)=x(i,pos1)+22;
            end
            if pos2>=1
                x(i,pos2)=x(i,pos2)-22;
            end
            
            fitness(i,1)=abs(func(ceil(x(i,1)),ceil(x(i,2))));
            alimento=0;
            if abs(fitness(i)-media_global) > desvio_global*desvio
                alimento=alimento+fitness(i); 
                estoque(i)=estoque(i)+alimento;
            else
                estoque(i)=0;
            end
        end
        %Morte
        pos=find(estoque==0);
        for i=1:length(pos)
            fitness(pos(length(pos)-i+1))=[ ];
            estoque(pos(length(pos)-i+1))=[ ];
            x(pos(length(pos)-i+1),:)=[ ];
        end
        %Reprodução
        if rodada > 1
            pos=find(estoque> 0);
            for i=1:length(pos)
                estoque(length(estoque)+1)=estoque(pos(i));
                fitness(length(fitness)+1)=fitness(pos(i));
                x(length(x(:,1))+1,:)=x(pos(i),:)+[x(pos(i),1)*(0.5-rand())/70 x(pos(i),1)*(0.5-rand())/70];
            end
        end
                subplot(1,2,1)
%                 contour(func)
                image( dif)
                subplot(1,2,2)
                scatter(x(:,2),uby-x(:,1),'.')
                axis([0 ubx 0 uby])
                pause(0.1)
        
    end % fim das rodadas
    
    %População
    x_registro(frame)=length(x(:,1));
    if frame>4
        x_registro(frame)=(x_registro(frame)+x_registro(frame-1)+x_registro(frame-2)+x_registro(frame-3))/4;
    end
    %Estoque
    estoque_registro(frame)=mean(estoque);
    if frame>4
        estoque_registro(frame)=(estoque_registro(frame)+estoque_registro(frame-1)+estoque_registro(frame-2)+estoque_registro(frame-3))/4;
    end
    %Ponto médio
    ponto_medio(frame)=sqrt(mean(x(:,1))^2+ mean(x(:,2))^2);
    if frame>4
        ponto_medio(frame)=(ponto_medio(frame)+ponto_medio(frame-1)+ponto_medio(frame-2)+ponto_medio(frame-3))/4;
    end
    
    frame
    
%     subplot(3,1,1)
%        %contourf(func)
%        %pcolor(func)
%     imagesc(func)
%     axis([0 ubx 0 uby])
%     subplot(3,1,2)
%     scatter(x(:,2),-x(:,1),'r*')
%         %axis([0 200 0 200])
%     axis([0 ubx -uby 0])
%     pause(0.00000001)
%     subplot(3,1,3)
%     plot(x_registro(1:end))
%  
 end

subplot(3,1,1)
plot(x_registro(1:end))
hold on
plot(1:length(x_registro),ones(length(x_registro))*mean(x_registro(1:end)),'r')
hold off
xlabel('Frame')
ylabel('População')
title('Crowd 4')
subplot(3,1,2)
plot(estoque_registro(1:end))
hold on
plot(1:length(estoque_registro),ones(length(estoque_registro))*mean(estoque_registro(1:end)),'r')
hold off
xlabel('Frame')
ylabel('Estoque')
subplot(3,1,3)
plot(ponto_medio(1:end))
hold on
plot(1:length(ponto_medio),ones(length(ponto_medio))*mean(ponto_medio(1:end)),'r')
hold off
xlabel('Frame')
ylabel('Módulo do Ponto Médio')


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Comandos Para Vídeo
% clc
% clear all
%
% v = VideoReader('crowd1.wmv');
% vidHeight = v.Height;
% vidWidth = v.Width;
% s = struct('cdata',zeros(vidHeight,vidWidth,3,'uint8'),'colormap',[]);
% k=1;
% while hasFrame(v)
%     s(k).cdata = readFrame(v);
%     k = k+1;
% end
% for i=1:k-2
%     imagem1=rgb2gray(s(i).cdata);
%     imagem2=rgb2gray(s(i+1).cdata);
%     % imwrite(s(5).cdata,'frame1.jpg','jpg')
%     % imwrite(s(6).cdata,'frame2.jpg','jpg')
%     a(:,:,i)=imagem2-imagem1;
% end
%
% for i=1:k-2
%     imagesc(a(:,:,i))
%     pause(0.00001);
% end
% save('a.mat','a')


% Comandos para cam
% camList = webcamlist
% cam = webcam(1)
% preview(cam);
% img = snapshot(cam);
% %imwrite(img,'imagem_nova.jpg','jpg')
% for i=1:10000
%     img = snapshot(cam);
%     image(img);
%     imgc(:,:,i)=rgb2gray(img);
%     if i>1
%         dif= imgc(:,:,i) - imgc(:,:,i-1);
%         image(dif)
%     end
%     pause(0.1)
% end
%
% for i=1:100
%     imshow(imgc(:,:,i));
%     pause(0.1)
% end
% clear cam

